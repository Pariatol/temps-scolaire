{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","checkIfMercredi","e","preventDefault","data","require","form","document","querySelector","i","regExp","RegExp","elements","commune","value","toLowerCase","searchResult","filter","item","test","undefined","mercredi_matin","console","log","length","setState","ville","fourDaysAndHalf","doesntExist","firstSearch","state","className","Titre","SearchBar","this","toUpperCase","React","Component","Fragment","onSubmit","id","name","placeholder","type","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oy8tbAiFeA,G,kBA7Eb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KASRC,gBAAkB,SAACC,GACjBA,EAAEC,iBACF,IAAIC,EAAOC,EAAQ,IACfC,EAAOC,SAASC,cAAc,QAC9BC,EAAI,EAEJC,EAASC,OAAOL,EAAKM,SAASC,QAAQC,MAAMC,cAAc,KAE1DC,EAAeZ,EAAKa,QAAO,SAAAC,GAC7B,IAAGA,EAAKL,QAAQE,gBAAgBT,EAAKM,SAASC,QAAQC,MAAMC,eAAiBL,EAAOS,KAAKD,EAAKL,QAAQE,kBACpGN,SACyBW,IAAtBF,EAAKG,gBACN,OAAOH,KAKbI,QAAQC,IAAId,GAETO,EAAaQ,OAAO,GACrBF,QAAQC,IAAI,kBACZ,EAAKE,SAAS,CACZC,MAAMpB,EAAKM,SAASC,QAAQC,MAC5Ba,iBAAgB,EAChBC,aAAY,KAEkB,IAAxBZ,EAAaQ,QAAgBf,EAAE,EACvC,EAAKgB,SAAS,CACZC,MAAMpB,EAAKM,SAASC,QAAQC,MAC5Ba,iBAAgB,EAChBC,aAAY,KAGZ,EAAKH,SAAS,CACZG,aAAY,IAEdN,QAAQC,IAAI,gBAEhB,EAAKE,SAAS,CACZI,aAAY,KA/Cd,EAAKC,MAAQ,CACXH,gBAAgB,EAChBD,MAAM,GACNG,aAAY,EACZD,aAAY,GANE,E,sEAsDhB,OAEE,yBAAKG,UAAU,OACb,kBAACC,EAAD,MACA,kBAACC,EAAD,CAAWhC,gBAAiBiC,KAAKjC,kBAEhCiC,KAAKJ,MAAMF,YAUZ,uBAAGG,UAAU,UAAb,kEARCG,KAAKJ,MAAMD,YAGZK,KAAKJ,MAAMH,gBACX,uBAAGI,UAAU,UAAb,oBAAqCG,KAAKJ,MAAMJ,MAAMS,cAAtD,sDACC,uBAAGJ,UAAU,UAAb,oBAAqCG,KAAKJ,MAAMJ,MAAMS,cAAtD,6DAJD,U,GAhEUC,IAAMC,YAiFxB,SAASL,IACP,OACE,kBAAC,IAAMM,SAAP,KACE,wBAAIP,UAAU,SAAd,6BACA,wBAAIA,UAAU,aAAd,qGAKN,SAASE,EAAUjC,GAEjB,OACE,kBAAC,IAAMsC,SAAP,KACE,0BAAMC,SAAU,SAACrC,GAAD,OAAKF,EAAMC,gBAAgBC,KAC3C,2BAAO6B,UAAU,SAASS,GAAG,UAAUC,KAAK,UAAUC,YAAY,8BAA8BC,KAAK,SACrG,2BAAOZ,UAAU,eAAeY,KAAK,aCvFvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAAS4C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1136bc9a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      fourDaysAndHalf:0,\n      ville:'',\n      firstSearch:false,\n      doesntExist:false\n    }\n  }\n\n  checkIfMercredi = (e) => {\n    e.preventDefault();\n    var data = require('./hellYeah.json');\n    var form = document.querySelector(\"form\");\n    var i = 0;\n    // dans l'expression régulière, on ajoute \" \" pour tenir compte de Paris, Marseille et Lyon, qui prennent, par ex, la forme \"Paris 5e Arrondissement\"\n    var regExp = RegExp(form.elements.commune.value.toLowerCase()+\" \");\n    \n    var searchResult = data.filter(item => {\n      if(item.commune.toLowerCase()===form.elements.commune.value.toLowerCase() || regExp.test(item.commune.toLowerCase())){\n        i++;\n        if(item.mercredi_matin!==undefined){\n          return item;\n        }        \n      } \n    })\n\n    console.log(i)\n\n    if(searchResult.length>0){\n      console.log(\"oui, 4.5 jours\")\n      this.setState({\n        ville:form.elements.commune.value,\n        fourDaysAndHalf:true,\n        doesntExist:false\n      });\n    } else if(searchResult.length === 0 && i>0) {\n      this.setState({\n        ville:form.elements.commune.value,\n        fourDaysAndHalf:false,\n        doesntExist:false\n      });\n    } else {\n        this.setState({\n          doesntExist:true\n        })\n        console.log('commune not')\n    }\n    this.setState({\n      firstSearch:true\n    });\n  }\n\n  render(){\n    return (\n\n      <div className=\"App\">\n        <Titre/>\n        <SearchBar checkIfMercredi={this.checkIfMercredi}/>\n        {\n        !this.state.doesntExist?  \n\n        !this.state.firstSearch?\n        null\n        :\n        this.state.fourDaysAndHalf?\n        <p className=\"result\">Les écoles de {this.state.ville.toUpperCase()} sont soumises à la semaine de 4 jours et demi.</p>\n        :<p className=\"result\">Les écoles de {this.state.ville.toUpperCase()} ne sont pas soumises à la semaine de 4 jours et demi.</p>\n        \n        :\n        <p className=\"result\">Cette commune n'est pas enregistrée. Veuillez réessayer.</p>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nfunction Titre() {\n  return (\n    <React.Fragment>\n      <h1 className=\"titre\">Ecole le mercredi matin ?</h1>\n      <h3 className=\"sousTitre\">Vérifiez si les écoles publiques de votre commune pratiquent la semaine de 4 jours et demi</h3>\n    </React.Fragment>\n  )\n}\n\nfunction SearchBar(props) {\n\n  return (\n    <React.Fragment>\n      <form onSubmit={(e)=>props.checkIfMercredi(e)}>      \n      <input className=\"search\" id=\"commune\" name=\"commune\" placeholder=\"Entrez le nom d'une commune\" type=\"text\"/>\n      <input className=\"submitButton\" type=\"submit\"/>\n      </form>\n    </React.Fragment>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}